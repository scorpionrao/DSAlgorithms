import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class RecursionCryptarithmetic {
  /*
   SEND
  +MORE
  MONEY
  Assign letters to numbers: D E M N O R S Y, 0 - 9
  Check for puzzle answer
   */
  private static class Puzzle {

    private Map<Character, Integer> getMap() {
      Map<Character, Integer> map = new LinkedHashMap<>();
      map.put('D', null);
      map.put('E', null);
      map.put('M', null);
      map.put('N', null);
      map.put('O', null);
      map.put('R', null);
      map.put('S', null);
      map.put('Y', null);
      return map;
    }

    private boolean isAnswer(Map<Character, Integer> map) {
      int firstValue =
          map.get('S') * 1000 + map.get('E') * 100 + map.get('N') * 10 + map.get('D');
      int secondValue =
          map.get('M') * 1000 + map.get('O') * 100 + map.get('R') * 10 + map.get('E');
      int sum =
          map.get('M') * 10000 + map.get('O') * 1000 + map.get('N') * 100 + map.get('E') * 10 + map.get('Y');

      boolean check = firstValue + secondValue == sum;

      if(check) {
        System.out.println(String.format("S:%d, E:%d, N:%d, D:%d", map.get('S'), map.get('E'), map.get('N'), map.get('D')));
        System.out.println(String.format("M:%d, O:%d, R:%d, E:%d", map.get('M'), map.get('O'), map.get('R'), map.get('E')));
        System.out.println(String.format("M:%d, O:%d, N:%d, E:%d, Y:%d", map.get('M'), map.get('O'), map.get('N'), map.get('E'), map.get('Y')));
      }
      return check;
    }
  }

  private static boolean solve(Puzzle puzzle) {
    return solve(puzzle, puzzle.getMap());
  }

  private static boolean solve(Puzzle puzzle, Map<Character, Integer> map) {
    Character[] ch = new Character[1];
    if(!hasUnassignedLetters(map, ch)) {
      return puzzle.isAnswer(map);
    }
    for(int option = 0; option <= 9; option++) {
      // System.out.println(String.format("Character: %s, Option: %d", ch[0], option));
      if(isSafeAssignment(map, ch, option)) {
        map.put(ch[0], new Integer(option));
        if(solve(puzzle, map)) {
          return true;
        }
        map.put(ch[0], null);
      }
    }
    return false;
  }

  private static boolean isSafeAssignment(Map<Character, Integer> map, Character[] ch, int option) {
    // only assign to unassigned value
    if(map.get(ch[0]) != null) {
      return false;
    }
    // there are no characters with this option already
    if(map.values().contains(option)) {
      return false;
    }

    return true;
  }

  private static boolean hasUnassignedLetters(Map<Character, Integer> map, Character[] ch) {
    for(Map.Entry<Character, Integer> entry : map.entrySet()) {
      if(entry.getValue() == null) {
        ch[0] = entry.getKey();
        return true;
      }
    }
    return false;
  }

  public static void main(String[] args) {
    System.out.println(solve(new Puzzle()));
  }
}
